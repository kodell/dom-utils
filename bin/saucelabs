#!/usr/bin/env node

'use strict';

var request = require('request-promise');


var username = process.env.SAUCE_USERNAME || 'dom-utils';
var key = process.env.SAUCE_ACCESS_KEY || '58245a9c-6ee8-4daa-ae0b-5ad2b2a5d548';


var platforms = [
  ['Windows 10', 'chrome', 'latest'],
  ['OS X 10.11', 'firefox', 'latest'],
  ['OS X 10.11', 'safari', '9'],
  ['OS X 10.8', 'safari', '6'],
  ['Windows 10', 'MicrosoftEdge', 'latest'],
  ['Windows 8.1', 'internet explorer', '11'],
  ['Windows 8', 'internet explorer', '10'],
  ['Windows 7', 'internet explorer', '9'],
  ['Windows XP', 'internet explorer', '8']
]


var opts = {
  url: 'https://saucelabs.com/rest/v1/' + username + '/js-tests',
  method: 'POST',
  json: true,
  body: {
    platforms: platforms,
    url: 'http://f7851c03.ngrok.io/test/dom-utils-test.html',
    framework: 'mocha',
    name: 'dom-utils tests',
    build: Math.floor(Date.now() / 1000)
  },
  auth: {
    username: username,
    password: key
  }
};


request(opts)
    .then(waitForJobsToFinish)
    .then(reportResults)
    .catch(function(err) {
      console.error(err.stack || err);
      process.exit(1);
    });



function waitForJobsToFinish(body) {
  var jobs = body['js tests'];
  var progress = {};

  for (let id of jobs) {
    progress[id] = {};
  }

  return new Promise(function(resolve, reject) {
    (function checkJobStatus() {
      setTimeout(function() {
        request({
          url: 'https://saucelabs.com/rest/v1/' + username + '/js-tests/status',
          method: 'POST',
          json: true,
          body: body,
          auth: {
            username: username,
            password: key
          }
        }).then(function(result) {
          updateJobProgress(progress, result);
          if (result.completed) {
            resolve(result);
          }
          else {
            return checkJobStatus();
          }
        }).catch(reject);
      }, 3000);
    }());
  });
}


function updateJobProgress(progress, result) {
  let jobs = result['js tests'];
  for (let job of jobs) {
    // No status means the job has completed
    var status = job.status || 'test finished ' + formatResult(job.result);

    if (status != progress[job.id].status) {
      progress[job.id].status = status;
      console.log(formatPlatform(job.platform) + ' : ' + status);
    }

    if (status.indexOf('error') > -1) {
      throw new Error(result);
    }
  }
  return progress;
}


function reportResults(result) {
  let failures = 0;
  let jobs = result['js tests'];
  for (let job of jobs) {
    failures += job.result.failures;
  }
  if (failures === 0) {
    console.log('All tests pass!');
  }
  else {
    console.log(`Oops! There were ${failures} failures!`);
    process.exit(1);
  }
}


function formatResult(result) {
  let tests = result.tests;
  let passes = result.passes;
  let failures = result.failures;
  if (typeof tests == 'number' &&
      typeof passes == 'number' &&
      typeof failures == 'number') {
    return `${tests} tests, ${passes} passes, ${failures} failures`;
  } else {
    return '';
  }
}


function formatPlatform(platform) {
  var os = platform[0];
  var browser = platform[1];
  var version = platform[2];

  return `${browser} (${version}) on ${os}`;
}
